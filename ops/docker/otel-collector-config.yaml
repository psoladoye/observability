receivers:
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318

processors:
  memory_limiter:
    check_interval: 1s
    limit_percentage: 65
    spike_limit_percentage: 20
  batch:
  resourcedetection:
    detectors: [ gcp ]
    timeout: 10s
    override: false
    
  attributes/gcp:
    actions:
      - key: gcp.log_name
        action: insert
        from_attribute: Application
        
#  logstransform/gcp:
#    operators:
#      - type: regex_parser
#        regex: '(?m)^(?P<remoteIp>[^ ]*) (?P<host>[^ ]*) (?P<user>[^ ]*) \[(?P<time>[^\]]*)\] "(?P<requestMethod>\S+)(?: +(?P<requestUrl>[^\"]*?)(?: +(?P<protocol>\S+))?)?" (?P<status>[^ ]*) (?P<responseSize>[^ ]*)(?: "(?P<referer>[^\"]*)" "(?P<userAgent>[^\"]*)")?$'
#        parse_to: attributes["gcp.http_request"]
        
exporters:
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true

  logging:
    loglevel: debug
  
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    
  prometheus:
    endpoint: 0.0.0.0:8889
    
  googlecloud:
    log:
      default_log_name: "opentelemetry.io/collector-exported-log"

connectors:
  forward:
      
extensions:
  health_check:
  pprof:
  zpages:
    endpoint: 0.0.0.0:55679
    
service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ otlp/tempo ]
    metrics:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ prometheus ]
    logs:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ loki, forward ]
    logs/gcp:
      receivers: [ forward ]
      processors: [ memory_limiter, batch, resourcedetection, attributes/gcp ]
      exporters: [ logging ]
  
  telemetry:
    logs:
      level: debug
    metrics:
      level: detailed
      address: 0.0.0.0:8888