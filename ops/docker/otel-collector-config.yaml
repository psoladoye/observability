receivers:
  otlp:
    protocols:
      http:
        endpoint: 0.0.0.0:4318

processors:
  memory_limiter:
    check_interval: 1s
    limit_percentage: 65
    spike_limit_percentage: 20
  batch:
  resourcedetection:
    detectors: [ gcp ]
    timeout: 10s
    override: false
    
#  attributes/gcp:
#    actions:
#      - key: gcp.log_name
#        action: insert
#        from_attribute: Application
  
  transform/gcp:
    error_mode: ignore
    log_statements:
      - context: log
        statements:
          - set(cache["message"], body.string)
          - set(cache["logName"], attributes["Application"])
#          - set(cache["httpRequest"], attributes["HttpRequest"])
          - set(body, ParseJSON("{}"))
          - set(body["message"], cache["message"])
          - set(body["properties"], attributes)
          - set(attributes, ParseJSON("{}"))
          - set(attributes["gcp.log_name"], cache["logName"])
#          - set(attributes["gcp.http_request"], cache["httpRequest"])
#          - set(cache["gcp.http_request"], ParseJSON("{}"))
#          - set(cache["gcp.http_request"]["requestMethod"], body["properties"]["RequestMethod"])
#          - set(cache["gcp.http_request"]["requestUrl"], body["properties"]["RequestUrl"])
#          - set(cache["gcp.http_request"]["status"], body["properties"]["StatusCode"])
#          - set(cache["gcp.http_request"]["serverIp"], body["properties"]["ServerIp"])
#          - set(cache["gcp.http_request"]["remoteIp"], body["properties"]["RemoteIp"])
#          - set(attributes["gcp.http_request"], cache["gcp.http_request"].string)
          - set(attributes["gcp.http_request"], ParseJSON("{}"))
#          - set(attributes["gcp.http_request"]["requestMethod"], body["properties"]["RequestMethod"])
#          - set(attributes["gcp.http_request"]["requestUrl"], body["properties"]["RequestUrl"])
#          - set(attributes["gcp.http_request"]["status"], body["properties"]["StatusCode"])
#          - set(attributes["gcp.http_request"]["serverIp"], body["properties"]["ServerIp"])
#          - set(attributes["gcp.http_request"]["remoteIp"], body["properties"]["RemoteIp"])
        
exporters:
  otlp/tempo:
    endpoint: tempo:4317
    tls:
      insecure: true

  logging:
    loglevel: debug
  
  loki:
    endpoint: http://loki:3100/loki/api/v1/push
    
  prometheus:
    endpoint: 0.0.0.0:8889
    
  googlecloud:
    log:
      default_log_name: "opentelemetry.io/collector-exported-log"

connectors:
  forward:
      
extensions:
  health_check:
  pprof:
  zpages:
    endpoint: 0.0.0.0:55679
    
service:
  extensions: [health_check, pprof, zpages]
  pipelines:
    traces:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ otlp/tempo, googlecloud ]
    metrics:
      receivers: [ otlp ]
      processors: [ batch ]
      exporters: [ prometheus, googlecloud ]
    logs:
      receivers: [ otlp ]
      processors: [ memory_limiter, batch ]
      exporters: [ loki, forward ]
    logs/gcp:
      receivers: [ forward ]
      processors: [ memory_limiter, batch, resourcedetection, transform/gcp ]
      exporters: [ loki, googlecloud ]
  
  telemetry:
    logs:
      level: debug
    metrics:
      level: detailed
      address: 0.0.0.0:8888